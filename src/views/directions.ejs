<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/api/ol/ol.css" type="text/css" />
    <style>
      body,
      * {
        padding: 0;
        margin: 0;
        font-family: Arial, Helvetica, sans-serif;
      }
      .map {
        height: 100vh;
        width: 100%;
      }
      .ol-popup {
        position: absolute;
        background-color: white;
        box-shadow: 0 1px 4px rgba(0, 0, 0, 0.2);
        padding: 15px;
        border-radius: 10px;
        border: 1px solid #cccccc;
        bottom: 12px;
        left: -50px;
        width: fit-content;
      }
      .ol-popup:after,
      .ol-popup:before {
        top: 100%;
        border: solid transparent;
        content: " ";
        height: 0;
        width: 0;
        position: absolute;
        pointer-events: none;
      }
      .ol-popup:after {
        border-top-color: white;
        border-width: 10px;
        left: 48px;
        margin-left: -10px;
      }
      .ol-popup:before {
        border-top-color: #cccccc;
        border-width: 11px;
        left: 48px;
        margin-left: -11px;
      }
      .ol-popup-closer {
        text-decoration: none;
        position: absolute;
        top: 2px;
        right: 8px;
      }
      .ol-popup-closer:after {
        content: "âœ–";
      }

      .ol-zoom {
        top: 100px;
      }

      .bottompanel {
        position: absolute;
        bottom: 1em;
        left: 1em;
        right: 1em;
        background-color: rgba(0, 0, 0, 0.8);
        border-radius: 20px;
        padding: 10px 1em 10px 1em;
      }

      .toppanel {
        position: absolute;
        top: 1em;
        left: 1em;
        right: 1em;
        background-color: rgba(41, 182, 246, 1);
        border-radius: 20px;
        padding: 10px 1em 10px 1em;
        display: grid;
        grid-template-columns: 2fr 1fr;
        color: white;
        gap: 10px;
      }
      .left {
        display: grid;
        grid-template-columns: auto 1fr;
        gap: 10px;
      }

      .content {
        margin: auto;
        height: fit-content;
        width: 100%;
      }

      .right {
        width: fit-content;
        margin: auto 0 auto auto;
      }

      .bottompanel .container {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 2em;
      }

      .bottompanel button {
        padding: 10px;
        background-color: rgba(255, 255, 255, 0.5);
        cursor: pointer;
        color: black;
        width: fit-content;
        height: fit-content;
        min-width: 200px;
        display: block;
        margin: auto auto auto 0;
        border: 1px solid transparent;
        border-radius: 5px;
        box-shadow: 1px 1px 5px #60606060;
      }
      .bottompanel button:hover {
        box-shadow: 1px 1px 5px #606060;
      }

      .bottompanel img {
        cursor: pointer;
        width: fit-content;
        display: block;
        margin: auto 0 auto auto;
        border: 1px solid #60606060;
        box-shadow: 1px 1px 5px #60606060;
      }
    </style>
    <script src="/api/ol/ol.js"></script>
    <title>Mobile Mapping App</title>
  </head>
  <body style="margin: 0; padding: 0">
    <div id="map" class="map"></div>
    <div id="popup" class="ol-popup">
      <a href="#" id="popup-closer" class="ol-popup-closer"></a>
      <div id="popup-content"></div>
    </div>
    <div class="bottompanel">
      <div class="container">
        <button onclick="onDeviceMove()">Recenter</button>
        <img src="/api/images/icon.svg" alt="" />
      </div>
    </div>
    <div class="toppanel">
      <div class="left">
        <img src="/api/images/icon.svg" alt="" />
        <div class="content">
          <h3>350 M Turn left</h3>
          <h4>Elgon Road</h4>
        </div>
      </div>
      <div class="right">
        <h4>30 Min</h4>
        <h4>15 Km</h4>
      </div>
    </div>
    <script type="text/javascript">
      var currentPos = 0;
      let routeData = null;
      let startLocation = [36.816498, -1.297948];
      let endLocation = [36.810314, -1.282815];
      const container = document.getElementById("popup");
      const content = document.getElementById("popup-content");
      const closer = document.getElementById("popup-closer");

      const overlay = new ol.Overlay({
        element: container,
        autoPan: {
          animation: {
            duration: 250,
          },
        },
      });
      closer.onclick = function () {
        overlay.setPosition(undefined);
        closer.blur();
        return false;
      };

      const linelayer = new ol.layer.Vector({
        source: new ol.source.Vector(),
        style: new ol.style.Style({
          stroke: new ol.style.Stroke({
            color: "blue",
            width: 3,
          }),
        }),
      });

      let details = {
        coordinates: {
          lat: -1.0297948,
          lng: 36.0816498,
        },
        url: "https://www.duniamaps.com/tile/{z}/{x}/{y}.png",
        attribution:
          'Map data & copy; <a href="https://duniamaps.com/">DuniaMaps</a>',
      };

      const iconEnd = new ol.Feature({
        name: "Destination",
      });
      const currentLocation = new ol.Feature({
        name: "My Location",
      });

      const iconStyle = new ol.style.Style({
        image: new ol.style.Icon({
          anchor: [0.5, 1],
          scale: 0.05,
          anchorXUnits: "fraction",
          anchorYUnits: "fraction",
          src: "/api/images/endlocation.png",
        }),
      });
      iconEnd.setStyle(iconStyle);

      const clocStyle = new ol.style.Style({
        image: new ol.style.Icon({
          anchor: [1, 0],
          scale: 0.05,
          rotation: -0.785398,
          anchorXUnits: "fraction",
          anchorYUnits: "fraction",
          src: "/api/images/clocation.svg",
        }),
      });
      currentLocation.setStyle(clocStyle);

      const vectorSource = new ol.source.Vector({
        features: [iconEnd],
      });
      const vectorSource1 = new ol.source.Vector({
        features: [currentLocation],
      });

      const vectorLayer = new ol.layer.Vector({
        source: vectorSource,
      });

      const vectorLayer1 = new ol.layer.Vector({
        source: vectorSource1,
      });

      const view = new ol.View({
        center: ol.proj.fromLonLat([
          details.coordinates.lng,
          details.coordinates.lat,
        ]),
        zoom: 15,
      });

      var map = new ol.Map({
        target: "map",
        layers: [
          new ol.layer.Tile({
            source: new ol.source.XYZ({
              url:
                "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/{z}/{x}/{y}" +
                "?access_token=pk.eyJ1IjoiZ2F0aG9nbzEiLCJhIjoiY2t0djhndnB4MGkzdDJucDg2bW5uNXNrcyJ9.mnbTMXxDrdYnTrb8Gr7_MA",
            }),
          }),
          linelayer,
          vectorLayer,
          vectorLayer1,
        ],
        view: view,
      });

      function adjustMarker(lng, lat) {
        currentLocation.setGeometry(
          new ol.geom.Point(ol.proj.fromLonLat([lng, lat]))
        );

        view.setCenter(ol.proj.fromLonLat([lng, lat]));
        view.setZoom(20);
      }

      loadData();

      function loadData() {
        fetch(
          `https://api.duniamaps.com/route?point=${startLocation[1]},${startLocation[0]}&point=${endLocation[1]},${endLocation[0]}&locale=en-US&vehicle=car&weighting=fastest&elevation=true&use_miles=false&layer=OpenStreetMap&points_encoded=false`
        )
          .then((res) => {
            if (res.ok) return res.json();
            else throw Error("");
          })
          .then((data) => {
            routeData = data;
            console.log(data.paths[0]);

            iconEnd.setGeometry(
              new ol.geom.Point(
                ol.proj.fromLonLat(
                  data.paths[0].points.coordinates[
                    data.paths[0].points.coordinates.length - 1
                  ]
                )
              )
            );

            currentLocation.setGeometry(
              new ol.geom.Point(
                ol.proj.fromLonLat(data.paths[0].points.coordinates[0])
              )
            );

            const rotation =
              (data.paths[0].instructions[0].heading * Math.PI) / 180 -
              0.785398;

            let lineFeature = {
              type: "FeatureCollection",
              features: [
                {
                  type: "Feature",
                  id: 1,
                  geometry: data.paths[0].points,
                },
              ],
              crs: {
                type: "name",
                properties: { name: "urn:ogc:def:crs:EPSG::4326" },
              },
            };

            linelayer.setSource(
              new ol.source.Vector({
                features: new ol.format.GeoJSON({
                  dataProjection: "EPSG:4326",
                  featureProjection: "EPSG:3857",
                }).readFeatures(lineFeature),
              })
            );
            let extent = ol.proj.transformExtent(
              data.paths[0].bbox,
              "EPSG:4326",
              "EPSG:3857"
            );
            view.fit(extent, {
              padding: [100, 100, 100, 100],
            });
          })
          .catch((e) => {});
      }

      function onDeviceMove() {
        if (routeData !== null) {
          if (currentPos < routeData.paths[0].points.coordinates.length) {
            adjustMarker(
              routeData.paths[0].points.coordinates[currentPos][0],
              routeData.paths[0].points.coordinates[currentPos][1]
            );
            currentPos += 1;
            const bearing = getBearing();
            view.setRotation(bearing);
          }
        }
      }

      function getBearing() {
        let e1 = routeData.paths[0].points.coordinates[currentPos][0];
        let n1 = routeData.paths[0].points.coordinates[currentPos][1];
        let e2 = routeData.paths[0].points.coordinates[currentPos + 1][0];
        let n2 = routeData.paths[0].points.coordinates[currentPos + 1][1];

        const de = e2 - e1;
        const dn = n2 - n1;
        const v = de / dn;

        let angle = Math.abs((Math.atan(v) * 180) / Math.PI);
        console.log(e1, e2);
        console.log(n1, n2);
        console.log(de, dn, angle);
        if (de >= 0 && dn >= 0) {
          return 90 - angle;
        } else if (de >= 0 && dn < 0) {
          return 90 + angle;
        } else if (de < 0 && dn < 0) {
          return 270 - angle;
        } else if (de < 0 && dn >= 0) {
          return 270 + angle;
        }
      }
    </script>
    <script></script>
  </body>
</html>
